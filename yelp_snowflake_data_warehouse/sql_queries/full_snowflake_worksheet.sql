-- define the storage integration for the raw unzipped folder
CREATE STORAGE INTEGRATION udacity_yelp_integration
  TYPE = EXTERNAL_STAGE
  STORAGE_PROVIDER = S3
  ENABLED = TRUE
  STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::415972643590:role/udacity-yelp-storage-integration-snowflake-role'
  STORAGE_ALLOWED_LOCATIONS = ('s3://udacity-yelp-jcorrado76/raw_unzipped/');
-- describe the integration so we can grab the external user 
DESC INTEGRATION udacity_yelp_integration;


-- CREATE DATA STAGES
create stage yelp_business_stage
  storage_integration = udacity_yelp_integration
  FILE_FORMAT = (TYPE = JSON)
  url = 's3://udacity-yelp-jcorrado76/raw_unzipped/yelp/business/';
  
create stage yelp_checkin_stage
  storage_integration = udacity_yelp_integration
  FILE_FORMAT = (TYPE = JSON)
  url = 's3://udacity-yelp-jcorrado76/raw_unzipped/yelp/checkin/';
  
create stage yelp_covid_stage
  storage_integration = udacity_yelp_integration
  FILE_FORMAT = (TYPE = JSON)
  url = 's3://udacity-yelp-jcorrado76/raw_unzipped/yelp/covid/';
  
create stage yelp_review_stage
  storage_integration = udacity_yelp_integration
  FILE_FORMAT = (TYPE = JSON)
  url = 's3://udacity-yelp-jcorrado76/raw_unzipped/yelp/review/';
  
create stage yelp_tip_stage
  storage_integration = udacity_yelp_integration
  FILE_FORMAT = (TYPE = JSON)
  url = 's3://udacity-yelp-jcorrado76/raw_unzipped/yelp/tip/';
  
create stage yelp_user_stage
  storage_integration = udacity_yelp_integration
  FILE_FORMAT = (TYPE = JSON)
  url = 's3://udacity-yelp-jcorrado76/raw_unzipped/yelp/user/';
  
create or replace stage weather_temperature_stage
  storage_integration = udacity_yelp_integration
  FILE_FORMAT = (TYPE = CSV SKIP_HEADER = 1 DATE_FORMAT = 'YYYYMMDD')
  url = 's3://udacity-yelp-jcorrado76/raw_unzipped/weather/temperature/';
  
create or replace stage weather_precipitation_stage
  storage_integration = udacity_yelp_integration
  FILE_FORMAT = (TYPE = CSV SKIP_HEADER = 1 DATE_FORMAT = 'YYYYMMDD' NULL_IF = ( 'T' ))
  url = 's3://udacity-yelp-jcorrado76/raw_unzipped/weather/precipitation/';
  
SHOW STAGES;

-- CREATE STAGING TABLES
CREATE OR REPLACE TABLE "UDACITY_YELP_PROJECT"."STAGING"."YELP_BUSINESS" (
  BUSINESS_DATA VARIANT
);

CREATE OR REPLACE TABLE "UDACITY_YELP_PROJECT"."STAGING"."YELP_CHECKIN" (
  CHECKIN_DATA VARIANT
);

CREATE OR REPLACE TABLE "UDACITY_YELP_PROJECT"."STAGING"."YELP_COVID" (
  COVID_DATA VARIANT
);

CREATE OR REPLACE TABLE "UDACITY_YELP_PROJECT"."STAGING"."YELP_REVIEW" (
  REVIEW_DATA VARIANT
);

CREATE OR REPLACE TABLE "UDACITY_YELP_PROJECT"."STAGING"."YELP_TIP" (
  TIP_DATA VARIANT
);

CREATE OR REPLACE TABLE "UDACITY_YELP_PROJECT"."STAGING"."YELP_USER" (
  USER_DATA VARIANT
);

CREATE OR REPLACE TABLE "UDACITY_YELP_PROJECT"."STAGING"."CLIMATE_TEMPERATURE" (
  DATE DATE,
  MIN FLOAT,
  MAX FLOAT,
  NORMAL_MIN FLOAT,
  NORMAL_MAX FLOAT
);

CREATE OR REPLACE TABLE "UDACITY_YELP_PROJECT"."STAGING"."CLIMATE_PRECIPITATION" (
  DATE DATE,
  PRECIPITATION FLOAT,
  PRECIPITATION_NORMAL FLOAT
);

-- COPY DATA INTO STAGING TABLES FROM EXTERNAL STAGES
COPY INTO "UDACITY_YELP_PROJECT"."STAGING"."YELP_BUSINESS"
FROM @yelp_business_stage;

COPY INTO "UDACITY_YELP_PROJECT"."STAGING"."YELP_CHECKIN"
FROM @yelp_checkin_stage;

COPY INTO "UDACITY_YELP_PROJECT"."STAGING"."YELP_COVID"
FROM @yelp_covid_stage;

COPY INTO "UDACITY_YELP_PROJECT"."STAGING"."YELP_REVIEW"
FROM @yelp_review_stage;

COPY INTO "UDACITY_YELP_PROJECT"."STAGING"."YELP_TIP"
FROM @yelp_tip_stage;

COPY INTO "UDACITY_YELP_PROJECT"."STAGING"."YELP_USER"
FROM @yelp_user_stage;

COPY INTO "UDACITY_YELP_PROJECT"."STAGING"."CLIMATE_TEMPERATURE"
FROM @weather_temperature_stage;

COPY INTO "UDACITY_YELP_PROJECT"."STAGING"."CLIMATE_PRECIPITATION"
FROM @weather_precipitation_stage;

-- CREATE ODS TABLES
CREATE SCHEMA ODS;
CREATE OR REPLACE TABLE "UDACITY_YELP_PROJECT"."ODS"."YELP_USER" (
  USER_ID VARCHAR PRIMARY KEY,
  NAME VARCHAR,
  REVIEW_COUNT INT,
  YELPING_SINCE TIMESTAMP,
  USEFUL INT,
  FUNNY INT,
  COOL INT,
  ELITE VARCHAR,
  FRIENDS VARCHAR,
  FANS INT,
  AVERAGE_STARS FLOAT,
  COMPLIMENT_HOT INT,
  COMPLIMENT_MORE INT,
  COMPLIMENT_PROFILE INT,
  COMPLIMENT_CUTE INT,
  COMPLIMENT_LIST INT,
  COMPLIMENT_NOTE INT,
  COMPLIMENT_PLAIN INT,
  COMPLIMENT_COOL INT,
  COMPLIMENT_FUNNY INT,
  COMPLIMENT_WRITER INT,
  COMPLIMENT_PHOTOS INT
);
CREATE OR REPLACE TABLE "UDACITY_YELP_PROJECT"."ODS"."YELP_BUSINESS" (
  BUSINESS_ID VARCHAR PRIMARY KEY,
  NAME VARCHAR,
  ADDRESS VARCHAR,
  CITY VARCHAR,
  STATE VARCHAR,
  POSTAL_CODE VARCHAR,
  LATITUDE FLOAT,
  LONGITUDE FLOAT,
  STARS FLOAT,
  REVIEW_COUNT INT,
  IS_OPEN VARCHAR,
  ATTRIBUTES VARCHAR,
  CATEGORIES VARCHAR,
  HOURS VARCHAR
);
CREATE OR REPLACE TABLE "UDACITY_YELP_PROJECT"."ODS"."YELP_CHECKIN" (
  BUSINESS_ID VARCHAR FOREIGN KEY REFERENCES "UDACITY_YELP_PROJECT"."ODS"."YELP_BUSINESS"(BUSINESS_ID),
  DATES VARCHAR
);
CREATE OR REPLACE TABLE "UDACITY_YELP_PROJECT"."ODS"."YELP_COVID" (
  BUSINESS_ID VARCHAR FOREIGN KEY REFERENCES "UDACITY_YELP_PROJECT"."ODS"."YELP_BUSINESS"(BUSINESS_ID),
  HIGHLIGHTS VARCHAR,
  DELIVERY_OR_TAKEOUT VARCHAR,
  GRUBHUB_ENABLED VARCHAR,
  CALL_TO_ACTION_ENABLED VARCHAR,
  REQUEST_QUOTE_ENABLED VARCHAR,
  COVID_BANNER VARCHAR,
  TEMPORARY_CLOSED_UNTIL VARCHAR,
  VIRTUAL_SERVICES_OFFERED VARCHAR
);
CREATE OR REPLACE TABLE "UDACITY_YELP_PROJECT"."ODS"."YELP_TIP" (
  USER_ID VARCHAR FOREIGN KEY REFERENCES "UDACITY_YELP_PROJECT"."ODS"."YELP_USER"(USER_ID),
  BUSINESS_ID VARCHAR FOREIGN KEY REFERENCES "UDACITY_YELP_PROJECT"."ODS"."YELP_BUSINESS"(BUSINESS_ID),
  TEXT VARCHAR,
  DATE TIMESTAMP,
  COMPLIMENT_COUNT INT
);
CREATE OR REPLACE TABLE "UDACITY_YELP_PROJECT"."ODS"."YELP_REVIEW" (
  REVIEW_ID VARCHAR PRIMARY KEY,
  USER_ID VARCHAR FOREIGN KEY REFERENCES "UDACITY_YELP_PROJECT"."ODS"."YELP_USER"(USER_ID),
  BUSINESS_ID VARCHAR FOREIGN KEY REFERENCES "UDACITY_YELP_PROJECT"."ODS"."YELP_BUSINESS"(BUSINESS_ID),
  STARS INT,
  USEFUL INT,
  FUNNY INT,
  COOL INT,
  TEXT VARCHAR,
  DATE TIMESTAMP
);
  
CREATE OR REPLACE TABLE "UDACITY_YELP_PROJECT"."ODS"."WEATHER_PRECIPITATION" (
  PRECIPITATION FLOAT,
  PRECIPITATION_NORMAL FLOAT,
  DATE DATE
);
CREATE OR REPLACE TABLE "UDACITY_YELP_PROJECT"."ODS"."WEATHER_TEMPERATURE" (
  MIN FLOAT,
  MAX FLOAT,
  NORMAL_MIN FLOAT,
  NORMAL_MAX FLOAT,
  DATE DATE
);

-- COPY DATA FROM STAGING INTO ODS
INSERT INTO "UDACITY_YELP_PROJECT"."ODS"."YELP_USER" (
  USER_ID,
  NAME,
  REVIEW_COUNT,
  YELPING_SINCE,
  USEFUL,
  FUNNY,
  COOL,
  ELITE,
  FRIENDS,
  FANS,
  AVERAGE_STARS,
  COMPLIMENT_HOT,
  COMPLIMENT_MORE,
  COMPLIMENT_PROFILE,
  COMPLIMENT_CUTE,
  COMPLIMENT_LIST,
  COMPLIMENT_NOTE,
  COMPLIMENT_PLAIN,
  COMPLIMENT_COOL,
  COMPLIMENT_FUNNY,
  COMPLIMENT_WRITER,
  COMPLIMENT_PHOTOS
)
SELECT
  USER_DATA:user_id::VARCHAR,
  USER_DATA:name::VARCHAR,
  USER_DATA:review_count::INT,
  USER_DATA:yelping_since::TIMESTAMP,
  USER_DATA:useful::INT,
  USER_DATA:funny:INT,
  USER_DATA:cool::INT,
  USER_DATA:elite::VARCHAR,
  USER_DATA:friends::VARCHAR,
  USER_DATA:fans:INT,
  USER_DATA:average_stars::FLOAT,
  USER_DATA:compliment_hot::INT,
  USER_DATA:compliment_more::INT,
  USER_DATA:compliment_profile::INT,
  USER_DATA:compliment_cute::INT,
  USER_DATA:compliment_list::INT,
  USER_DATA:compliment_note::INT,
  USER_DATA:compliment_plain::INT,
  USER_DATA:compliment_cool::INT,
  USER_DATA:compliment_funny::INT,
  USER_DATA:compliment_writer::INT,
  USER_DATA:compliment_photos::INT
FROM "UDACITY_YELP_PROJECT"."STAGING"."YELP_USER";

INSERT INTO "UDACITY_YELP_PROJECT"."ODS"."YELP_BUSINESS" (
  BUSINESS_ID,
  NAME,
  ADDRESS,
  CITY,
  STATE,
  POSTAL_CODE,
  LATITUDE,
  LONGITUDE,
  STARS,
  REVIEW_COUNT,
  IS_OPEN,
  ATTRIBUTES,
  CATEGORIES,
  HOURS
)
SELECT
  BUSINESS_DATA:business_id::VARCHAR,
  BUSINESS_DATA:name::VARCHAR,
  BUSINESS_DATA:address::VARCHAR,
  BUSINESS_DATA:city::VARCHAR,
  BUSINESS_DATA:state::VARCHAR,
  BUSINESS_DATA:postal_code::VARCHAR,
  BUSINESS_DATA:latitude::FLOAT,
  BUSINESS_DATA:longitude::FLOAT,
  BUSINESS_DATA:stars:FLOAT,
  BUSINESS_DATA:review_count::INT,
  BUSINESS_DATA:is_open::VARCHAR,
  BUSINESS_DATA:attributes::VARCHAR,
  BUSINESS_DATA:categories::VARCHAR,
  BUSINESS_DATA:hours::VARCHAR
FROM "UDACITY_YELP_PROJECT"."STAGING"."YELP_BUSINESS";

INSERT INTO "UDACITY_YELP_PROJECT"."ODS"."YELP_CHECKIN" (
  BUSINESS_ID,
  DATES
)
SELECT
  CHECKIN_DATA:business_id::VARCHAR,
  CHECKIN_DATA:date::VARCHAR
FROM "UDACITY_YELP_PROJECT"."STAGING"."YELP_CHECKIN";

INSERT INTO "UDACITY_YELP_PROJECT"."ODS"."YELP_COVID" (
  BUSINESS_ID,
  HIGHLIGHTS,
  DELIVERY_OR_TAKEOUT,
  GRUBHUB_ENABLED,
  CALL_TO_ACTION_ENABLED,
  REQUEST_QUOTE_ENABLED,
  COVID_BANNER,
  TEMPORARY_CLOSED_UNTIL,
  VIRTUAL_SERVICES_OFFERED
)
SELECT
  COVID_DATA:"business_id"::VARCHAR,
  COVID_DATA:"highlights"::VARCHAR,
  COVID_DATA:"delivery or takeout"::VARCHAR,
  COVID_DATA:"Grubhub enabled"::VARCHAR,
  COVID_DATA:"Call To Action enabled"::VARCHAR,
  COVID_DATA:"Request a Quote Enabled"::VARCHAR,
  COVID_DATA:"Covid Banner"::VARCHAR,
  COVID_DATA:"Temporary Closed Until"::VARCHAR,
  COVID_DATA:"Virtual Services Offered"::VARCHAR
FROM "UDACITY_YELP_PROJECT"."STAGING"."YELP_COVID";

INSERT INTO "UDACITY_YELP_PROJECT"."ODS"."YELP_TIP" (
  USER_ID,
  BUSINESS_ID,
  TEXT,
  DATE,
  COMPLIMENT_COUNT
)
SELECT
  TIP_DATA:"user_id"::VARCHAR,
  TIP_DATA:"business_id"::VARCHAR,
  TIP_DATA:"text"::VARCHAR,
  TIP_DATA:"date"::TIMESTAMP,
  TIP_DATA:"compliment_count"::INT
FROM "UDACITY_YELP_PROJECT"."STAGING"."YELP_TIP";

INSERT INTO "UDACITY_YELP_PROJECT"."ODS"."YELP_REVIEW" (
  REVIEW_ID,
  USER_ID,
  BUSINESS_ID,
  STARS,
  USEFUL,
  FUNNY,
  COOL,
  TEXT,
  DATE
)
SELECT
  REVIEW_DATA:"review_id"::VARCHAR,
  REVIEW_DATA:"user_id"::VARCHAR,
  REVIEW_DATA:"business_id"::VARCHAR,
  REVIEW_DATA:"stars"::INT,
  REVIEW_DATA:"useful"::INT,
  REVIEW_DATA:"funny"::INT,
  REVIEW_DATA:"cool"::INT,
  REVIEW_DATA:"text"::VARCHAR,
  REVIEW_DATA:"date"::TIMESTAMP
FROM "UDACITY_YELP_PROJECT"."STAGING"."YELP_REVIEW";

INSERT INTO "UDACITY_YELP_PROJECT"."ODS"."WEATHER_PRECIPITATION" (PRECIPITATION, PRECIPITATION_NORMAL, DATE)
SELECT PRECIPITATION::FLOAT, PRECIPITATION_NORMAL::FLOAT, DATE::DATE
FROM "UDACITY_YELP_PROJECT"."STAGING"."CLIMATE_PRECIPITATION";

INSERT INTO "UDACITY_YELP_PROJECT"."ODS"."WEATHER_TEMPERATURE" (MIN, MAX, NORMAL_MIN, NORMAL_MAX, DATE)
SELECT 
  MIN::FLOAT,
  MAX::FLOAT,
  NORMAL_MIN::FLOAT,
  NORMAL_MAX::FLOAT,
  DATE::DATE
FROM "UDACITY_YELP_PROJECT"."STAGING"."CLIMATE_TEMPERATURE";

-- how to integrate yelp data and climate data
SELECT
  REVIEW_ID,
  USER_ID,
  BUSINESS_ID,
  STARS,
  USEFUL,
  FUNNY,
  COOL,
  TEXT,
  r.DATE,
  PRECIPITATION,
  PRECIPITATION_NORMAL,
  MIN,
  MAX,
  NORMAL_MIN,
  NORMAL_MAX
FROM "UDACITY_YELP_PROJECT"."ODS"."YELP_REVIEW" AS r
  LEFT JOIN "UDACITY_YELP_PROJECT"."ODS"."WEATHER_PRECIPITATION" AS p
    ON r.DATE::DATE = p.DATE
  LEFT JOIN "UDACITY_YELP_PROJECT"."ODS"."WEATHER_TEMPERATURE" AS t
    ON r.DATE::DATE = t.DATE
LIMIT 5;




-- CREATE DWH TABLES
CREATE SCHEMA DWH;
CREATE OR REPLACE TABLE "UDACITY_YELP_PROJECT"."DWH"."DATE_DIM" (
  DATE DATE PRIMARY KEY
);
CREATE OR REPLACE TABLE "UDACITY_YELP_PROJECT"."DWH"."BUSINESS_DIM" (
  BUSINESS_ID VARCHAR PRIMARY KEY,
  BUSINESS_NAME VARCHAR
);
CREATE OR REPLACE TABLE "UDACITY_YELP_PROJECT"."DWH"."REVIEW_FACT" (
  REVIEW_ID VARCHAR,
  STARS INT,
  BUSINESS_ID VARCHAR FOREIGN KEY REFERENCES "UDACITY_YELP_PROJECT"."DWH"."BUSINESS_DIM"(BUSINESS_ID) ,
  DATE DATE FOREIGN KEY REFERENCES "UDACITY_YELP_PROJECT"."DWH"."DATE_DIM"(DATE),
  MIN_TEMP FLOAT,
  MAX_TEMP FLOAT,
  PRECIPITATION FLOAT
);


-- INSERT DATA FROM ODS TO DWH
INSERT OVERWRITE INTO "UDACITY_YELP_PROJECT"."DWH"."DATE_DIM" (DATE)
SELECT
  DATE
FROM (
  SELECT * FROM (
    select distinct(date) from "UDACITY_YELP_PROJECT"."ODS"."WEATHER_PRECIPITATION"
    union
    select distinct(date) from "UDACITY_YELP_PROJECT"."ODS"."WEATHER_TEMPERATURE"
    union
    select distinct(DATE::DATE) from "UDACITY_YELP_PROJECT"."ODS"."YELP_REVIEW"
  )
);


INSERT OVERWRITE INTO "UDACITY_YELP_PROJECT"."DWH"."BUSINESS_DIM" (BUSINESS_ID, BUSINESS_NAME)
SELECT
  BUSINESS_ID,
  NAME
FROM "UDACITY_YELP_PROJECT"."ODS"."YELP_BUSINESS";


INSERT OVERWRITE INTO "UDACITY_YELP_PROJECT"."DWH"."REVIEW_FACT" (
  REVIEW_ID,
  STARS,
  BUSINESS_ID,
  DATE,
  MIN_TEMP,
  MAX_TEMP,
  PRECIPITATION
)
SELECT
  reviews.REVIEW_ID,
  reviews.STARS,
  reviews.BUSINESS_ID,
  reviews.DATE,
  temp.MIN,
  temp.MAX,
  precip.PRECIPITATION
FROM
  "UDACITY_YELP_PROJECT"."ODS"."YELP_REVIEW" AS reviews
  LEFT JOIN "UDACITY_YELP_PROJECT"."ODS"."WEATHER_TEMPERATURE" as temp
    ON reviews.DATE::DATE = temp.DATE
  LEFT JOIN "UDACITY_YELP_PROJECT"."ODS"."WEATHER_PRECIPITATION" as precip
    ON reviews.DATE::DATE = precip.DATE;
    
-- now summarize some stuff!
SELECT
  BUSINESS_NAME,
  f.BUSINESS_ID,
  DATE,
  STARS,
  PRECIPITATION,
  MIN_TEMP,
  MAX_TEMP
FROM "UDACITY_YELP_PROJECT"."DWH"."REVIEW_FACT" AS f
  LEFT JOIN "UDACITY_YELP_PROJECT"."DWH"."BUSINESS_DIM" AS b
    ON f.BUSINESS_ID = b.BUSINESS_ID
WHERE f.BUSINESS_ID = 'sUGx4txCbV2muiOKwdzE2w'
ORDER BY DATE
LIMIT 5;
